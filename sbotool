#!/bin/bash
#
# SboTool - An simple tool for building slackbuild packages on slackware
# Copyright (C) 2025 Rogério Girão
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# Project Page: https://codeberg.org/rgcastrof/sbotool
# Rogério Girão rogeriogirao1@proton.me
#
LOCAL_DIR="/var/lib/sbotool"
REPO_NAME="slackbuilds"
REPO_URL="git://git.slackbuilds.org/slackbuilds.git"
REPO_DIR="$LOCAL_DIR/$REPO_NAME"

check_dir() {
	local pkg="$1"

	pkg_dir=$(sniff "$REPO_DIR" -t d "$pkg")
	if [ -z "$pkg_dir" ]; then
		echo "Package $pkg not found."
		exit 1
	fi
}

is_newer_version() {
	local local_version="$1"
	local repo_version="$2"

	local latest=$(printf "%s\n%s" "$local_version" "$repo_version" | sort -V | tail -n1)

	if [ "$latest" = "$repo_version" ] && [ "$local_version" != "$repo_version" ]; then
		return 0
	else
		return 1
	fi
}

check_args() {
	if [ $# -eq 0 ]; then
		echo -e "Error: You need to pass at least one argument\n"
		exit 1
	fi
}

show_pkg_status() {
	local -n installed_ref=$1
	local pkg="$2"

	if [ ! -z $(printf "%s\n" "${installed_ref[@]}" | grep "$pkg") ]; then
		echo "[ installed ] - $pkg"
	else
		echo "[uninstalled] - $pkg"
	fi
}

update_repo() {
	if [ ! -d "$REPO_DIR/.git" ]; then
		echo "Cloning repository, this may take a while..."
		mkdir -p "$REPO_DIR"
		if ! git clone "$REPO_URL" "$REPO_DIR"; then
			echo "Failed to clone repository."
			exit 1
		fi
		echo "Clone completed."
	else
		old=$(git --git-dir="$REPO_DIR/.git" --work-tree="$REPO_DIR" rev-parse HEAD)

		echo "Synchronizing SlackBuilds repository..."
		if ! git --git-dir="$REPO_DIR/.git" --work-tree="$REPO_DIR" pull; then
			echo "Error: Failed to synchronize the repository."
			exit 1
		fi

		new=$(git --git-dir="$REPO_DIR/.git" --work-tree="$REPO_DIR" rev-parse HEAD)
		if [ "$old" != "$new" ]; then
			read -p "View the ChangeLog[y/N]? " answer
			if [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
				less "$REPO_DIR/ChangeLog.txt"
			fi
		fi
		echo "Done."
	fi
}

search_pkg() {
	local pkg="$1"
	if [ -z $pkg ]; then
		echo "Error: you need to specify a name"
		exit 1
	fi

	mapfile -t installed < <(sniff /var/log/packages/ -t f -p "SBo" | sed -E 's/-[^-]+-[^-]+$//')

	names_match=$(sniff "$REPO_DIR" -p -t d "$pkg")
	if [ -z "$names_match" ]; then
		echo "Package $pkg not found"
	else
		echo -e "Searching for $pkg in the local SlackBuilds repository...\n"
		echo -e "List of all packages with name matching \"$pkg\".\n"
		for pkg_dir in $names_match; do
			pkg_name=$(basename "$pkg_dir")
			version=$(grep "VERSION" "$pkg_dir/$pkg_name.info" | cut -d '"' -f2)
			pkg_full="$pkg_name-$version"
			show_pkg_status installed "$pkg_full"
		done
	fi
}

build_pkg() {
	local pkg="$1"
	check_dir "$pkg"

	exts=".gz .xz zip .crate .bz2"
	urls=""
	src=()
	
	# Extract source urls from the .info file
	for ext in $exts; do
		download=$(grep "$ext" "$pkg_dir/$pkg.info")
		if [ ! -z "$download" ]; then
			urls=$(echo "$DOWNLOAD" | sed -E 's/^DOWNLOAD[^=]*=//')
			urls=$(echo "$URLS" | tr -d '"' | tr -d '\\' | sed 's/^[[:space:]]*//')
		fi
	done

	# Download source files
	for url in $urls; do
		echo -e "\nDownloading source from: $url to directory: $pkg_dir...\n"
		if wget -P "$pkg_dir" "$url"; then
			echo -e "\nDownload completed successfully\n"
		else
			echo -e "\nError: Failed to download source file\n"
			exit 1
		fi
		file="$pkg_dir/$(basename "$url")"
		src+=("$file")
	done

	# Extract MD5 hashes from the .info file
	mapfile -t MD5SUM < <(grep -oE '[[:xdigit:]]{32}' "$pkg_dir/$pkg.info")

	# Verify integrity of downloaded files
	for i in "${!SRC[@]}"; do
		src=$(md5sum "${SRC[$i]}" | awk '{print $1}')
		echo "Verifying MD5 checksum for: $(basename ${SRC[$i]})..."
		if [ "$src" = "${MD5SUM[$i]}" ]; then
			echo -e "Checksum OK.\n"
		else
			echo "Error: Checksum mismatch!"
			exit 1
		fi
	done

	chmod +x "$pkg_dir/$pkg.SlackBuild" && "$pkg_dir/$pkg.SlackBuild"
}

install_pkg() {
	local pkg="$1"

	if ! build_pkg "$pkg"; then
		echo "Error: failed to install package"
		exit 1
	fi

	build_path=$(sniff -p -t f -d 0 /tmp/ "$pkg" | sort -V | tail -n1)
	if [ -z "$build_path" ]; then
		echo "Error: package not found in /tmp"
		exit 1
	fi
	/sbin/upgradepkg --reinstall --install-new "$build_path"
	echo "Done upgrading/installing package."
}

update_pkgs() {
	echo -e "Checking for potential updates...\n"
	mapfile -t installed < <(sniff /var/log/packages/ -t f -p "SBo")
	dif_found=0

	for i in ${!installed[@]}; do
		pkg=$(basename "${installed[$i]}")
		name=$(echo "$pkg" | sed -E 's/-[^-]+-[^-]+-[^-]+$//')
		local_version=$(echo "$pkg" | sed -E 's/^.*-([^-]+)-[^-]+-[^-]+$/\1/')

		repo_path=$(sniff "$REPO_DIR" -t d "$name" | head -n1)
		repo_version=$(grep "VERSION=" "$repo_path/$name.info" | cut -d '"' -f2)
		if [ "$local_version" != "$repo_version" ]; then
			dif_found=1

			if is_newer_version "$local_version" "$repo_version"; then
				echo -e "$name:\n	package is outdated: installed=$local_version | repo=$repo_version\n"
			else
				echo -e "$name:\n	package is newer than the repository: installed=$local_version | repo=$repo_version\n"
			fi
		fi
	done

	if [ "$dif_found" -eq 0 ]; then
		echo "All packages are up to date!"
	fi
}

list_deps() {
	local pkg="$1"
	check_dir "$pkg"

	mapfile -t installed < <(sniff /var/log/packages/ -t f -p "SBo")
	deps_list=$(grep "REQUIRE" "$pkg_dir/$pkg.info" | cut -d '"' -f2)
	if [ -z "$deps_list" ]; then
		echo "No dependencies required for $pkg."
	else
		echo -e "List dependencies required for \"$pkg\":\n"
		for dep in $deps_list; do
			show_pkg_status installed "$dep"
		done
	fi
}

list_installed() {
	installed_pkgs=$(sniff /var/log/packages/ -t f -p "SBo")

	less <<EOF
List of installed SBo packages:

$installed_pkgs
EOF
}

show_info() {
	local pkg="$1"
	check_dir "$pkg"
	readme=$(cat "$pkg_dir/README" 2>/dev/null)
	info=$(cat "$pkg_dir/$pkg.info" 2>/dev/null)
	slackbuild=$(cat "$pkg_dir/$pkg.SlackBuild" 2>/dev/null)

	less <<EOF
+--------+
| README |
+--------+

$readme

+------+
| INFO |
+------+

$info

+------------+
| SLACKBUILD |
+------------+

$slackbuild

EOF

}

usage() {
	cat <<EOF
Usage: $0 <command> [package-name]

Available commands:

	sync			Clone or update the local slackbuilds repository
	update			Check if installed SBo packages differ from the local SlackBuilds repo
	list			List all installed packages
	search  <name>		Search for packages matching the given name
	build   [<name>...]	Download, verify, and build the specified package(s)
	install [<name>...]	Build an install the specified package(s)
	deps    [<name>...]	List all dependencies requeired by the specified package(s)
	info    <name>		Show the README, .info file, and SlackBuild script for package
EOF
}

case "$1" in
	sync)
		update_repo
		;;
	search)
		search_pkg "$2"
		;;
	update)
		update_pkgs
		;;
	build)
		shift
		check_args $#
		for pkg in "$@"; do
			build_pkg "$pkg"
		done
		;;
	install)
		shift
		check_args $#
		for pkg in "$@"; do
			install_pkg "$pkg"
		done
		;;
	deps)
		shift
		check_args $#
		for pkg in "$@"; do
			list_deps "$pkg"
		done
		;;
	list)
		list_installed
		;;
	info)
		show_info "$2"
		;;
	*)
		usage
		exit 1
		;;
esac
