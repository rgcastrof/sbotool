#!/bin/bash
#
# sboports - A simple shell-based ports-like manager for SlackBuilds.org scripts.
# Copyright (C) 2025 Rogério Girão
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# Project Page: https://codeberg.org/rgcastrof/sboports
# Rogério Girão rogeriogirao1@proton.me
#
NAME=$(basename "$0")
VERSION=1.1.4
LOCAL_DIR="/var/lib"
REPO_NAME="slackbuilds"
REPO_DIR="$LOCAL_DIR/$REPO_NAME"
REPO_URL="git://git.slackbuilds.org/slackbuilds.git"
PKG_NAME=$(basename $(pwd))

error() {
	echo "$1"
	exit 1
}

dir_check() {
	path_dir=$(dirname $(dirname $(pwd)))
	if [ "$path_dir" == "$REPO_DIR" ]; then
		return 0
	fi
		return 1
}

validate_url() {
	case "$1" in
		http://*|https://*|ftp://*)
			if wget --spider -q "$1"; then
				return 0
			fi
			;;
		*)
			echo "Ignoring invalid entry: $1"
			;;
	esac
	return 1
}

try_urls() {
	found=0
	for url in $@; do
		if validate_url "$url"; then
			file=$(basename "$url")
			echo "Distfile found at: $url"
			wget -N "$url" || error "Failed to download $url"
			found=1
		fi
	done

	[ "$found" -eq 1 ] && return 0 || return 1
}

pkg_fetch() {
	if dir_check; then
		source "$PKG_NAME.info"
		if ! try_urls $DOWNLOAD; then
				echo "No valid url found. Trying with DOWNLOAD_x86_64"

			if ! try_urls $DOWNLOAD_x86_64; then
				error "No valid url found"
			fi
		fi
	else
		error "Error: You are not inside the SlackBuilds tree."
	fi
}

download_missing() {
	for url in $@; do
		if validate_url "$url"; then
			if [ -f $(basename "$url") ]; then
				hashes_arr+=("$(md5sum "$(basename "$url")" | awk '{print $1}')")
			else
				echo "Downloading missing distfile from: $url"
				if wget -nc "$url"; then
					hashes_arr+=("$(md5sum "$(basename "$url")" | awk '{print $1}')")
				else
					error "Failed to download missing distfile."
				fi
			fi
		fi
	done
}

extract_hashes() {
	source "$PKG_NAME.info"
	download_missing $DOWNLOAD
	download_missing $DOWNLOAD_x86_64
	md5sums=$(echo "$MD5SUM" "$MD5SUM_x86_64" | grep -oE '\b[a-fA-F0-9]{32}\b')
	md5sum_arr=($md5sums)
}

pkg_checksum() {
	extract_hashes
	echo "Verifying md5sums..."
	for ((i = 0; i < "${#md5sum_arr[@]}"; i++)); do
		if [ "${hashes_arr[$i]}" == "${md5sum_arr[$i]}" ]; then
			echo "Pass!"
		else
			error "Checksum mismatch!"
		fi
	done
}

pkg_build() {
	pkg_fetch
	pkg_checksum
	chmod +x "$PKG_NAME.SlackBuild" && "./$PKG_NAME.SlackBuild"
}

pkg_install() {
	if dir_check; then
		source "$PKG_NAME.info"
		pkg_file=$(sniff /tmp -t f -p "$PRGNAM-$VERSION")
		if [ ! -z "$pkg_file" ]; then
			echo "Package $PKG_NAME found at $pkg_file"
			read -p "Do you want to install/reinstall it? [y/N] " answer
			if [ "$answer" ==  "y" ] || [ "$answer" == "Y" ]; then
				/sbin/upgradepkg --reinstall --install-new "$pkg_file"
				echo "Package installed/reinstalled successfully."
				exit 0
			fi
		fi
		pkg_build
		pkg_file=$(sniff /tmp -t f -p "$PRGNAM-$VERSION")
		if /sbin/upgradepkg --reinstall --install-new "$pkg_file"; then
			echo "Package installed/reinstalled successfully."
		else
			error "Failed to install package"
		fi
	else
		error "Error: You are not inside the SlackBuilds tree."
	fi
}

pkg_uninstall() {
	if dir_check; then
		/sbin/removepkg "$PKG_NAME"
	else
		error "Error: You are not inside the SlackBuilds tree."
	fi
}

pkg_clean() {
	if dir_check; then
		extracted_source=$(find "/tmp/SBo" -maxdepth 2 -type d -name "$PKG_NAME*")
		for dir in $extracted_source; do
			rm -rf "$dir"
		done
		read -p "Do you also want to remove the distfiles? [y/N] " answer
		if [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
			source "$PKG_NAME.info"
			for distfile in $DOWNLOAD; do
				if [ -f $(basename "$distfile") ]; then
					rm "$(basename "$distfile")"
				fi
			done
		fi
	else
		error "Error: You are not inside the SlackBuilds tree."
	fi
}

show_info() {
	cat <<EOF
Prgnam:   $PRGNAM-$VERSION
Path:     $(basename "$(dirname "$pkg_path")")/$1
Info:	  $(grep "$1" "$pkg_path/slack-desc" | head -n1 | awk -F '[()]' '{print $2}')
Maint:	  $MAINTAINER <$EMAIL>
Index:    $(basename $(dirname $pkg_path))
Deps:	  $(if [ -z "$REQUIRES" ]; then echo "None"; else echo "$REQUIRES"; fi)
Homepage: $HOMEPAGE

EOF
}

pkg_search() {
	if [ -z "$1" ]; then
		error "You must specify a package name."
	fi

	if [[ "$PWD" =~ ^"$REPO_DIR" ]]; then
		pkg_path=$(find "$REPO_DIR" -type d -name "$1")
		if [ -z "$pkg_path" ]; then
			error "Package not found."
		else
			source "$pkg_path/$1.info"
			show_info "$1"
		fi
	else
		error "Error: You are not inside the SlackBuilds tree."
	fi
}

pkg_diff() {
	installed=$(sniff /var/log/packages -t f -p SBo)

	echo "Searching for differences between installed packages and SlackBuilds tree versions..."
	echo
	for pkg in $installed; do
		pkg_name="$(basename "$pkg" | sed -E 's/-[0-9][^-]*-[^-]+-[^-]+_SBo$//')"
		pkg_version=$(basename "$pkg" | sed -E 's/.*-([0-9][^-]*)-[^-]+-[^-]+_SBo$/\1/')
		pkg_dir=$(find "$REPO_DIR" -type d -name "$pkg_name")
		source "$pkg_dir/$pkg_name.info"
		if [ "$pkg_version" != "$VERSION" ]; then
			echo "Package: $pkg_name"
			if [ "$(printf '%s\n%s\n' "$pkg_version" "$VERSION" | sort -V | head -n1)" = "$pkg_version" ]; then
					echo "Installed version is outdated."
					echo "Installed version: $pkg_version"
					echo "Version available in the SlackBuilds tree: $VERSION"
					echo
			else
					echo "Installed version is newer than the SlackBuilds tree version."
					echo "Installed version: $pkg_version"
					echo "Version available in the SlackBuilds tree: $VERSION"
					echo
			fi
		fi
	done
}

repo_extract() {
	if [ ! -d "$REPO_DIR/.git" ]; then
		echo "Cloning repository. This may take a while..."
		mkdir -p "$REPO_DIR"
		if ! git clone "$REPO_URL" "$REPO_DIR"; then
			error "Failed to clone repository."
		fi
		echo "Clone completed."
	else
		error "SlackBuilds tree already cloned."
	fi
}

repo_update() {
	echo "Synchronizing SlackBuilds repository..."

	git --git-dir="$REPO_DIR/.git" --work-tree="$REPO_DIR" reset --hard HEAD
	if ! git --git-dir="$REPO_DIR/.git" --work-tree="$REPO_DIR" pull; then
		error "Error: Failed to synchronize the repository."
	fi
}

handle_fetch_args() {
	if [ -z "$1" ]; then
		pkg_fetch
	else
		case "$1" in
			extract)
				repo_extract
				;;
			update)
				repo_update
				;;
			*)
				usage
				;;
		esac
	fi
}

usage() {
	cat <<EOF
$NAME - version $VERSION

Usage:
       $NAME fetch {extract|update}
       $NAME checksum
       $NAME {install|uninstall|clean}
       $NAME search [PACKAGE]

For more info, run: $NAME help
EOF
}

show_help() {
		cat <<EOF

$NAME - version $VERSION

Usage: $NAME <command>

List of $NAME commands:

Synchronize and check for updates:
	fetch extract            Clone SlackBuilds.org repository into /var/lib.
	fetch update             Update the local SlackBuilds repository tree.

Work with packages:
	fetch                    Download source files (distfiles) for the specified package.
	checksum                 Verify the integrity of distfiles using md5 checksum.
	diff                     Show version differences between installed packages and SlackBuilds tree.
	install                  Build and install the specified package.
	uninstall                Remove the installed package.
	clean                    Remove extracted source and temporary build files from /tmp.

Show information:
	search <package>         Search for a package by name and display its metadata.
	help                     Show this help message.
EOF
}

case "$1" in
	fetch)
		handle_fetch_args "$2"
		;;
	checksum)
		pkg_checksum
		;;
	build)
		pkg_build
		;;
	install)
		pkg_install
		;;
	uninstall)
		pkg_uninstall
		;;
	clean)
		pkg_clean
		;;
	search)
		pkg_search "$2"
		;;
	diff)
		pkg_diff
		;;
	help)
		show_help
		;;
	*)
		usage
		;;
esac
