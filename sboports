#!/bin/bash
#
# sboports - An simple shell-based ports-like manager for SlackBuilds.org scripts.
# Copyright (C) 2025 Rogério Girão
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# Project Page: https://codeberg.org/rgcastrof/sboports
# Rogério Girão rogeriogirao1@proton.me
#
NAME=$(basename "$0")
VERSION=0.11.11
LOCAL_DIR="/var/lib"
REPO_NAME="slackbuilds"
REPO_DIR="$LOCAL_DIR/$REPO_NAME"
REPO_URL="git://git.slackbuilds.org/slackbuilds.git"
PKG_NAME=$(basename $(pwd))

error() {
	echo "$1"
	exit 1
}

dir_check() {
	path_dir=$(dirname $(dirname $(pwd)))
	if [ "$path_dir" == "$REPO_DIR" ]; then
		return 0
	fi
		return 1
}

pkg_fetch() {
	if dir_check; then
		source "$PKG_NAME.info"
		for url in $DOWNLOAD; do
			if ! wget "$url"; then
				error "Failed to fetch the distfiles"
			fi
		done
	else
		error "Error: You are not inside the slackbuilds tree"
	fi
}

hashes_extract() {
	if dir_check; then
		source "$PKG_NAME.info"
		for url in $DOWNLOAD; do
			distfile=$(basename "$url")
			src=$(ls | grep -w "$distfile")
			if [ -z "$src" ]; then
				echo "Distfile \"$distfile\" missing, downloading now..."
				wget "$url"
				src=$(ls | grep -w "$distfile")
			fi
			hashes+="$(md5sum "$src" | awk '{print $1}') "
		done
	else
		error "Error: You are not inside the slackbuilds tree"
	fi
}

pkg_checksum() {
	hashes_extract
	hashes_arr=($hashes)
	md5sum_arr=($MD5SUM)

	echo "Verifying md5sums..."
	for ((i = 0; i < "${#md5sum_arr[@]}"; i++)); do
		if [ "${hashes_arr[$i]}" == "${md5sum_arr[$i]}" ]; then
			echo "Pass!"
		else
			error "Failed!"
		fi
	done
}

pkg_build() {
	pkg_fetch
	pkg_checksum
	chmod +x "$PKG_NAME.SlackBuild" && "./$PKG_NAME.SlackBuild"
}

pkg_install() {
	if dir_check; then
		pkg_file=$(find /tmp -maxdepth 1 -type f -name "$PKG_NAME*" | sort -V | tail -n1)
		if [ ! -z "$pkg_file" ]; then
			echo "Package $PKG_NAME found in $pkg_file"
			read -p "Do you want to install/reinstall it? [y/N] " answer
			if [ "$answer" ==  "y" ] || [ "$answer" == "Y" ]; then
				/sbin/upgradepkg --reinstall --install-new "$pkg_file"
				echo "Done upgrading/installing package."
				exit 0
			fi
		fi
		pkg_build
	else
		error "Error: You are not inside the slackbuilds tree"
	fi
}

pkg_uninstall() {
	if dir_check; then
		/sbin/removepkg "$PKG_NAME"
	else
		error "Error: You are not inside the slackbuilds tree"
	fi
}

pkg_clean() {
	if dir_check; then
		extracted_source=$(find "/tmp/SBo" -maxdepth 2 -type d -name "$PKG_NAME*")
		for dir in $extracted_source; do
			rm -rf "$dir"
		done
		read -p "Wanna clean the distfiles too? [y/N] " answer
		if [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
			source "$PKG_NAME.info"
			for distfile in $DOWNLOAD; do
				if [ -f $(basename "$distfile") ]; then
					rm "$(basename "$distfile")"
				fi
			done
		fi
	else
		error "Error: You are not inside the slackbuilds tree"
	fi
}

show_info() {
	cat <<EOF
Prgnam:   $PRGNAM-$VERSION
Path:     $(basename $(dirname $pkg_path))/$PKG_NAME
Info:	  $(grep "$PKG_NAME" "$pkg_path/slack-desc" | head -n1 | awk -F '[()]' '{print $2}')
Maint:	  $MAINTAINER <$EMAIL>
Index:    $(basename $(dirname $pkg_path))
Deps:	  $(if [ -z "$REQUIRES" ]; then echo "None"; else echo "$REQUIRES"; fi)
Homepage: $HOMEPAGE

EOF
}

pkg_search() {
	if [ -z "$1" ]; then
		error "You need to pass at least one argument."
	fi

	pkg_path=$(find "$REPO_DIR" -maxdepth 2 -type d -name "$PKG_NAME*")
	if [ -z "$pkg_path" ]; then
		error "Package not found."
	else
		source "$pkg_path/$PKG_NAME.info"
		show_info
	fi
}

repo_extract() {
	if [ ! -d "$REPO_DIR/.git" ]; then
		echo "Cloning repository, this may take a while..."
		mkdir -p "$REPO_DIR"
		if ! git clone "$REPO_URL" "$REPO_DIR"; then
			error "Failed to clone repository."
		fi
		echo "Clone completed."
	else
		error "Slackbuilds tree already cloned."
	fi
}

repo_update() {
	echo "Synchronizing SlackBuilds repository..."

	git --git-dir="$REPO_DIR/.git" --work-tree="$REPO_DIR" reset --hard HEAD
	if ! git --git-dir="$REPO_DIR/.git" --work-tree="$REPO_DIR" pull; then
		error "Error: Failed to synchronize the repository."
	fi
}

handle_fetch_args() {
	if [ -z "$1" ]; then
		pkg_fetch
	else
		case "$1" in
			extract)
				repo_extract
				;;
			update)
				repo_update
				;;
			*)
				error "Error: invalid command."
				;;
		esac
	fi
}

case "$1" in
	fetch)
		handle_fetch_args "$2"
		;;
	checksum)
		pkg_checksum
		;;
	build)
		pkg_build
		;;
	install)
		pkg_install
		;;
	uninstall)
		pkg_uninstall
		;;
	clean)
		pkg_clean
		;;
	search)
		pkg_search "$2"
		;;
	*)
		error "Error: Invalid command."
		;;
esac
